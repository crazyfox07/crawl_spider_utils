[program:usercenter]
directory = /home/leon/projects/usercenter ; 程序的启动目录
command = gunicorn -c gunicorn.py wsgi:app  ; 启动命令，可以看出与手动在命令行启动的命令是一样的
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 3     ; 启动失败自动重试次数，默认是 3
user = leon          ; 用哪个用户启动
redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false
stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB
stdout_logfile_backups = 20     ; stdout 日志文件备份数
; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
stdout_logfile = /data/logs/usercenter_stdout.log
 
; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH
; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere


supervisorctl -c /etc/supervisord.conf
上面这个命令会进入 supervisorctl 的 shell 界面，然后可以执行不同的命令了：

> status    # 查看程序状态
> stop usercenter   # 关闭 usercenter 程序
> start usercenter  # 启动 usercenter 程序
> restart usercenter    # 重启 usercenter 程序
> reread    ＃ 读取有更新（增加）的配置文件，不会启动新添加的程序
> update    ＃ 重启配置文件修改过的程序

;[program:theprogramname]
;command=/bin/cat              ; * 要执行的命令路径（可以是相对与 PATH 的路径）也可带参数
;process_name=%(program_name)s ; 当进程数为 1 时 为 %(program_name)s 当进程数 >1 时 应配置为 %(program_name)s_%(process_num)02d
;numprocs=1                    ; 进程数量 (默认 1)
;directory=/tmp                ; 在执行运行前切换到目录 (def no cwd)
;umask=022                     ; 掩码 (default None)
;priority=999                  ; 优先级，数值越低越先启动而越后关闭 (default 999)
;autostart=true                ; 在 supervisord 启动时即启动 (default: true)
;startsecs=1                   ; 需要考虑进程启动成功的时间, 当 running 状态超过该值时，表明启动成功 (def. 1)
;startretries=3                ; 在启动时状态为失败时的最大尝试重启次数 (default 3)
;autorestart=unexpected        ; 当进程退出时是否应该重启，可选值为 false true unexpected ，为 false 时表示不重启，为 true 表示重启，为 unexpected 时，如果退出状态码不是 exitcodes 中之一时进行重启 (def: unexpected)
;exitcodes=0,2                 ; 用来重启的状态码 (default 0,2)
;stopsignal=QUIT               ; 进程停止信号，当用设定的信号去干掉进程，退出码会被认为是 expected (default TERM)
;stopwaitsecs=10               ; 这个是当我们向子进程发送 stopsignal 信号后，到系统返回信息给 supervisord，所等待的最大时间。超过这个时间，supervisord会向该子进程发送一个强制 kill 的信号。 (default 10)
;stopasgroup=false             ; 如果设置为 true 那么将会终止该进程下的所有子进程 (default false)
;killasgroup=false             ; 当进程关闭时向该进程的子进程发送的是 kill 信号 (def false)
;user=chrism                   ; 可以管理该 program 的用户
;redirect_stderr=true          ; 如果为 true，那么 stderr 将会被写入 stdout 日志文件中 (default false)
;stdout_logfile=/a/path        ; 日志文件路径， NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; 日志文件的最大大小 (default 50MB)
;stdout_logfile_backups=10     ; 日志文件的最大数量 (default 10)
;stdout_capture_maxbytes=1MB   ; capture 管道的大小，当值不为 0 时，子进程可以从 stdout 发送信息，而 supervisor 可以根据信息，发送相应的 event (default 0)
;stdout_events_enabled=false   ; 当设置为 ture 的时候，当子进程由 stdout 向文件描述符中写日志的时候，将触发 supervisord 发送 PROCESS_LOG_STDOUT 类型的 event (default false)
;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)
;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A="1",B="2"       ; 子进程共享的环境变量 (def no adds)
;serverurl=AUTO                ; override serverurl computation (childutils)

